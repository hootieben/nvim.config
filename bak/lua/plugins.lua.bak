local utils = require("utils")
local fn = vim.fn

vim.g.package_home = fn.stdpath("data") .. "/site/pack/packer/"
local packer_install_dir = vim.g.package_home .. "/opt/packer.nvim"

local plug_url_format = "https://github.com/%s"
local packer_repo = string.format(plug_url_format, "wbthomason/packer.nvim")

local install_cmd = string.format("10split |term git clone --depth=1 %s %s", packer_repo, packer_install_dir)

-- Auto-install packer in case it hasn't been installed.
if fn.glob(packer_install_dir) == "" then
  vim.api.nvim_echo({ { "Installing packer.nvim", "Type" } }, true, {})
  vim.cmd(install_cmd)
end

-- Load packer.nvim
vim.cmd("packadd packer.nvim")
local util = require('packer.util')

require("packer").startup({
  function(use)
    -- it is recommened to put impatient.nvim before any other plugins
    -- use {'lewis6991/impatient.nvim', config = [[require('impatient')]]}
    use {'lewis6991/impatient.nvim'}

    use({"wbthomason/packer.nvim", opt = true})

    use ({"dracula/vim", as = "dracula", opt=true})

    use {'kyazdani42/nvim-web-devicons'}

    use {
      'kyazdani42/nvim-tree.lua',
      requires = {
        'kyazdani42/nvim-web-devicons', -- optional, for file icon
      },
      -- config = function() require'nvim-tree'.setup {} end
      config = [[require('config.nvimtree')]]
    }

    use {
        'nvim-treesitter/nvim-treesitter',
        run = function() require('nvim-treesitter.install').update({ with_sync = true }) end,
    }

    use {'nvim-telescope/telescope-fzf-native.nvim', run = 'make' }

    use {
      'nvim-telescope/telescope.nvim', branch = '0.1.x',
      requires = {
        'nvim-lua/plenary.nvim',
      },
      setup = [[require('config.telescope_setup')]],
      config = [[require('config.telescope')]],
    }

    -- Automatic insertion and deletion of a pair of characters
    use {
      'windwp/nvim-autopairs',
      config = function()
        require('nvim-autopairs').setup {}
      end
    }

    use {
      'nvim-lualine/lualine.nvim',
      config = [[require('config.lualine')]]
    }

    use {
      'lukas-reineke/indent-blankline.nvim',
      config = function()
        require("indent_blankline").setup {
          show_current_context = true,
          show_current_context_start = true,
        }
      end

      --config = [[require('config.indent-blankline')]]
    }

  end,
  config = {
    max_jobs = 16,
    compile_path = util.join_paths(vim.fn.stdpath('config'), 'lua', 'packer_compiled.lua'),
    git = {
      default_url_format = plug_url_format,
    },
  },
})

local status, _ = pcall(require, 'packer_compiled')
if not status then
  vim.notify("Error requiring packer_compiled.lua: run PackerSync to fix!")
end
